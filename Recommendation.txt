Use HashMap if:
Time is critical, and you can afford extra memory usage.
Sorting is not feasible due to constraints.

Use Two-pointer if:
Memory usage is a concern.
The array is already sorted, or sorting is acceptable.


1. Finding Duplicates in an Array
Approach 1: HashSet

Steps:
Traverse the array, add elements to a HashSet.
Check if an element already exists in the HashSet to find duplicates.
Complexity:
Time: O(n)
Space: O(n)
Use Case:
Best for unsorted arrays where you need a quick solution.
Approach 2: Sorting

Steps:
Sort the array (O(n log n)).
Traverse and compare adjacent elements to find duplicates.
Complexity:
Time: O(n log n)
Space: O(1) if sorting in-place.
Use Case:
Best when memory usage is a constraint.
Recommendation:

Use HashSet for faster results.
Use Sorting when memory is limited.



2. Finding the Majority Element (Element Occurring > n/2 Times)
Approach 1: HashMap

Steps:
Use a HashMap to count frequencies.
Find the key with a count > n/2.
Complexity:
Time: O(n)
Space: O(n)
Use Case:
Ideal for unsorted arrays when extra space is acceptable.
Approach 2: Boyer-Moore Voting Algorithm

Steps:
Traverse the array to find a candidate (using a counter).
Verify the candidate in a second pass.
Complexity:
Time: O(n)
Space: O(1)
Use Case:
Best when memory usage is critical.
Recommendation:

Use Boyer-Moore for efficiency in both time and space.



3. Finding the k Largest Elements
Approach 1: Sorting

Steps:
Sort the array in descending order and take the first k elements.
Complexity:
Time: O(n log n)
Space: O(1) if sorting in-place.
Use Case:
Best when the entire array needs to be sorted for other purposes.
Approach 2: Min-Heap (Priority Queue)

Steps:
Use a Min-Heap of size k to maintain the largest k elements.
Traverse the array, updating the heap.
Complexity:
Time: O(n log k)
Space: O(k)
Use Case:
Best for large arrays where you only need the top k elements.
Recommendation:

Use Min-Heap for faster results in scenarios with large n and small k.
Use Sorting if k is close to n.



4. Finding Subarray with Given Sum
Approach 1: Brute Force

Steps:
Iterate over all possible subarrays and compute sums.
Complexity:
Time: O(n²)
Space: O(1)
Use Case:
Works for small arrays or when optimization isn't required.
Approach 2: Sliding Window (for positive numbers only)

Steps:
Use two pointers to maintain a window of elements summing to the target.
Complexity:
Time: O(n)
Space: O(1)
Use Case:
Best for large arrays with only positive numbers.
Approach 3: HashMap (for any numbers)

Steps:
Use a HashMap to store cumulative sums.
Check for the presence of currentSum - targetSum in the map.
Complexity:
Time: O(n)
Space: O(n)
Use Case:
Works for any type of numbers, including negatives.
Recommendation:

Use Sliding Window for positive numbers for minimal space usage.
Use HashMap for arrays with mixed numbers or negatives.




5. Finding Longest Increasing Subsequence
Approach 1: Dynamic Programming

Steps:
Use a dp array where dp[i] is the length of the LIS ending at index i.
Update the dp array based on previous elements.
Complexity:
Time: O(n²)
Space: O(n)
Use Case:
Suitable for moderately sized arrays.
Approach 2: Binary Search


Steps:
Use a list to maintain the smallest possible ending values for increasing subsequences of each length.
Update the list using binary search.
Complexity:
Time: O(n log n)
Space: O(n)
Use Case:
Best for large arrays requiring optimal performance.
Recommendation:

Use Binary Search for faster performance.
Use Dynamic Programming for simplicity in implementation.